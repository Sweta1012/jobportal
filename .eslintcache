[{"C:\\Users\\Arya\\Desktop\\CS\\INTERVIEW\\Egen\\job-portal\\src\\index.js":"1","C:\\Users\\Arya\\Desktop\\CS\\INTERVIEW\\Egen\\job-portal\\src\\App.js":"2","C:\\Users\\Arya\\Desktop\\CS\\INTERVIEW\\Egen\\job-portal\\src\\reportWebVitals.js":"3","C:\\Users\\Arya\\Desktop\\CS\\INTERVIEW\\Egen\\job-portal\\src\\components\\ViewJobs.js":"4","C:\\Users\\Arya\\Desktop\\CS\\INTERVIEW\\Egen\\job-portal\\src\\components\\header.js":"5"},{"size":548,"mtime":1610941892715,"results":"6","hashOfConfig":"7"},{"size":4839,"mtime":1610941636253,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":7502,"mtime":1610938896026,"results":"10","hashOfConfig":"7"},{"size":7623,"mtime":1610946508918,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"14coihv",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Arya\\Desktop\\CS\\INTERVIEW\\Egen\\job-portal\\src\\index.js",[],["25","26"],"C:\\Users\\Arya\\Desktop\\CS\\INTERVIEW\\Egen\\job-portal\\src\\App.js",["27","28","29"],"import { Component } from 'react';\nimport './App.scss';\nimport ViewJobs from './components/ViewJobs';\nimport Header from './components/header';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nclass App extends Component {\n\n  state = {\n    originalJobs: [],\n    jobs: [],\n    selectedJob: [],\n    theme: 'light',\n    page: 1,\n    latitude: null,\n    longitude: null,\n    isLoadMore: true,\n    isFilterPanel: true\n  }\n\n  componentDidMount() {\n    this.getGithubJobs(this.state.page);\n    this.getLocation();\n  }\n  getGithubJobs = (page) => {\n    fetch(`/positions.json?page=${page}`)\n    .then((res) => res.json())\n    .then(resJSON => {\n      \n      if(resJSON && resJSON.length > 0) {\n        this.setState({\n          originalJobs: [...this.state.originalJobs, ...resJSON],\n          jobs: [...this.state.jobs, ...resJSON],\n          isLoadMore: resJSON.length < 50 ? false : true\n        })\n      }\n    }) \n  }\n  changeTheme = () => {\n    let theme =this.state.theme;\n\n    if(theme === 'light') {\n        theme = 'dark';\n\n        this.setState({\n            theme\n        })\n    } else {\n        theme = 'light';\n\n        this.setState({\n            theme\n        })\n    }\n  }\n  getLocation = () => {\n    if(navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getCoordinates);\n    }\n  }\n  getCoordinates = (position) => {\n    if(position.coords.latitude && position.coords.longitude) {\n      this.setState({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      })\n\n      this.getUserLocation();\n    }\n  }\n  getUserLocation = () => {\n    const API_KEY = 'AIzaSyDSsfy9NRNOQL5tLRAPaGweVtcJ8hy5xNs';\n\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${this.state.latitude},${this.state.longitude}&key=${API_KEY}`)\n    .then(resp => resp.json())\n    .then(data => {\n      let userLocation = data.results.length > 0 ? data.results[6].formatted_address : '';\n\n      if(userLocation) {\n          // this.filterJobs(null, null, userLocation);\n      }\n    })\n    .catch(error => console.log(\"error occured while getting user location \", error));\n  }\n  filterJobs = (search, onlyFullTime, location) => {\n    console.log(\"in filter \", search, onlyFullTime, location);\n    let searchParam = search ? search.toLowerCase() : '';\n    let locationParam = location ? location.toLowerCase() : '';\n\n    let originalJobs = this.state.originalJobs;\n    let filteredJobs = originalJobs.filter((item, index) => {\n      if(onlyFullTime && (searchParam !== '' || locationParam !== '')) {\n        return item.type === 'Full Time' && (item.location.toLowerCase() === locationParam || item.title.toLowerCase() === searchParam || item.company.toLowerCase() === searchParam);\n      } else if(!onlyFullTime && (searchParam !== '' || locationParam !== '')) {\n        return item.location.toLowerCase() === locationParam || item.title.toLowerCase() === searchParam || item.company.toLowerCase() === searchParam;\n      } else if(onlyFullTime && searchParam === '' && locationParam === '') {\n        return item.type === 'Full Time';\n      } else {\n        return item;\n      }\n    });\n\n    if(!onlyFullTime && !search && !location) {\n      this.setState({\n        jobs: originalJobs\n      })\n    } else {\n      this.setState({\n        jobs: filteredJobs\n      })\n    }\n  }\n  loadMore = () => {\n    let page = this.state.page + 1;\n\n    this.setState({\n      page\n    })\n\n    this.getGithubJobs(page);\n  }\n  viewJob = (job) => {\n    console.log(\"selected job \", job);\n    let selectedJob = [];\n    selectedJob.push(job);\n\n    this.setState({\n      selectedJob,\n      isFilterPanel: false\n    })\n  }\n  goBack = () => {\n    this.setState({\n      isFilterPanel: true\n    })\n  }\n\n  render() {\n    return (\n        <div className={this.state.theme === 'light' ? 'light-theme' : 'dark-theme'}>\n          <Header theme={this.state.theme} changeTheme={this.changeTheme} filterJobs={this.filterJobs} isFilterPanel={this.state.isFilterPanel} selectedJob={this.state.selectedJob} goBack={this.goBack} />\n\n            {/* <Route path='/' exact render={({history}) => {\n                return <ViewJobs jobs={this.state.jobs} theme={this.state.theme} loadMore={this.loadMore} isLoadMore={this.state.isLoadMore} viewJob={this.viewJob} history={history}/>\n              }} /> \n\n            <Route path=\"/jobDetail/:id\" render={({history}) => {\n                return <JobDetail theme={this.state.theme} history={history} selectedJob={this.state.selectedJob}/>\n              }} /> */}\n          \n          <ViewJobs jobs={this.state.jobs} theme={this.state.theme} loadMore={this.loadMore} isLoadMore={this.state.isLoadMore} viewJob={this.viewJob} isFilterPanel={this.state.isFilterPanel} selectedJob={this.state.selectedJob} />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\Arya\\Desktop\\CS\\INTERVIEW\\Egen\\job-portal\\src\\reportWebVitals.js",[],"C:\\Users\\Arya\\Desktop\\CS\\INTERVIEW\\Egen\\job-portal\\src\\components\\ViewJobs.js",["30","31"],"import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction ViewJobs(props) {\r\n\r\n    const viewJob = (job) => {\r\n        // props.viewJob(job);\r\n        // props.history.push(`/jobDetail/${job.id}`);\r\n    }\r\n\r\n    return (\r\n        <div className={props.theme === 'light' ? 'view-wrapper' : 'view-wrapper-dark'}>\r\n            {\r\n                props.isFilterPanel === true ? \r\n                <div>\r\n                    {\r\n                        props.jobs.length > 0 ? \r\n                            <div>\r\n                                <div className=\"job-cards-wrap\">\r\n                                    <div className=\"job-cards\">\r\n                                        {\r\n                                            props.jobs.map((item, index) => {\r\n                                                return(\r\n                                                    <Card style={{ width: '18rem', height: '255px' }} className={props.theme === 'light' ? 'light-card' : 'dark-card'} name={item.title} id={`job-${item.id}`}  key={index}>\r\n                                                        <Card.Body className=\"job-body\" onClick={e => props.viewJob(item)}>\r\n                                                            <Card.Subtitle style={{ height: '25%' }} className=\"mb-2 text-muted\">{item.created_at} - {item.type}</Card.Subtitle>\r\n\r\n                                                            <div style={{ height: '65%' }}>\r\n                                                                <Card.Title  className={props.theme === 'light' ? '' : 'dark-text'}>{item.title}</Card.Title>\r\n                                                                <Card.Subtitle  className=\"mb-2 text-muted\">{item.company}</Card.Subtitle>\r\n                                                            </div>\r\n                                                            <Card.Link href=\"#\" style={{ color: '#5865E0', height: '10%' }}>{item.location}</Card.Link>\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                )\r\n                                            })\r\n                                        }\r\n\r\n                                    </div>  \r\n                                </div>\r\n                                {\r\n                                    props.isLoadMore ?  <div className=\"loadmore-wrap\">\r\n                                                            <Button variant=\"contained\" color=\"primary\" onClick={props.loadMore} >Load More</Button>\r\n                                                        </div> : null\r\n                                }\r\n                            </div>\r\n                            :  <div>\r\n                                No Jobs Found Matching Your Criteria\r\n                            </div>\r\n                    }\r\n                </div>    \r\n\r\n                : <div className=\"job-wrap\">\r\n                        {\r\n                            props.selectedJob.map((item, index) => {\r\n                                return (\r\n                                    <div key={index} style={{ width: '70%' }}>\r\n                                        <Card className={props.theme === 'light' ? 'light-card' : 'dark-card'} name={item.title} id={`job-${item.id}`} >\r\n                                            <Card.Body className=\"job-body\">\r\n                                                <Card.Subtitle style={{ height: '13%' }} className=\"mb-2 text-muted\">Job Type - {item.type}</Card.Subtitle>\r\n\r\n                                                <div className=\"job-heading\">\r\n                                                    <div>\r\n                                                        <Card.Title style={{ marginBottom: '0' }} className={props.theme === 'light' ? '' : 'dark-text'}>{item.title}</Card.Title>\r\n                                                        <Card.Link href=\"#\" style={{ color: '#5865E0', height: '10%' }}>{item.location}</Card.Link>\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <button className=\"apply-btn\">\r\n                                                            <a className=\"apply-link\" target=\"_blank\" href={item.url}>Apply Now</a>\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div style={{ padding: '4rem', marginBottom: '1rem'}} className={props.theme === 'light' ? '' : 'dark-text'}>\r\n                                                    <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>\r\n                                                    <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>\r\n                                                </div>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n\r\n                                        <Card style={{ marginTop: '5rem', marginBottom: '5rem' }} className=\"how-to-apply\" name={item.title} id={`job-${item.id}`}>\r\n                                            <Card.Body className=\"job-body\">\r\n                                                <div>\r\n                                                    <Card.Title style={{ marginBottom: '1.875rem', fontSize: '22px' }} className=\"dark-text\">How To Apply</Card.Title>\r\n                                                </div>\r\n                                                   \r\n                                                <div>\r\n                                                    <span className=\"apply-link\" dangerouslySetInnerHTML={{__html: item.how_to_apply}}></span>\r\n                                                </div>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                  </div> \r\n            }          \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ViewJobs;","C:\\Users\\Arya\\Desktop\\CS\\INTERVIEW\\Egen\\job-portal\\src\\components\\header.js",["32","33","34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":5,"column":10,"nodeType":"41","messageId":"42","endLine":5,"endColumn":16},{"ruleId":"39","severity":1,"message":"43","line":5,"column":18,"nodeType":"41","messageId":"42","endLine":5,"endColumn":23},{"ruleId":"39","severity":1,"message":"44","line":5,"column":42,"nodeType":"41","messageId":"42","endLine":5,"endColumn":48},{"ruleId":"39","severity":1,"message":"45","line":7,"column":11,"nodeType":"41","messageId":"42","endLine":7,"endColumn":18},{"ruleId":"46","severity":1,"message":"47","line":70,"column":61,"nodeType":"48","endLine":70,"endColumn":119},{"ruleId":"49","severity":1,"message":"50","line":113,"column":55,"nodeType":"51","messageId":"52","endLine":113,"endColumn":56},{"ruleId":"49","severity":1,"message":"50","line":126,"column":55,"nodeType":"51","messageId":"52","endLine":126,"endColumn":56},{"ruleId":"53","severity":1,"message":"54","line":171,"column":49,"nodeType":"48","endLine":171,"endColumn":52},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Router' is defined but never used.","'viewJob' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]